//1931
/*
문제의 요구 사항은 다음과 같다.
• 문제 요약: 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수 계산
[문제 해결 아이디어]
• 가장 먼저 모든 회의에 대하여 오름차순 정렬한다.
• 정렬할 때는 1) 종료 시점 2) 시작 시점을 우선순위로 한다.
• 첫 번째 회의부터 시작해 겹치지 않게 최대한 많은 회의를 선택한다

[핵심] 종료 시점이 이른 회의부터 확인하며, 겹치지 않게 배정한다.
*/

let c = 11;
let io = `1 4
3 5
0 6
5 7
3 8
5 9
6 10
8 11
8 12
2 13
12 14`;

const sol = (c, io) => {
  let arr = io.split('\n');
  for (let i = 0; i < arr.length; i++) {
    arr[i] = arr[i].split(' ').map(Number);
  }
  // (1) 종료 시점 (2) 시작 시점을 우선순위로 오름차순 정렬
  arr.sort((a, b) => {
    if (a[1] != b[1]) return a[1] - b[1];
    else return a[0] - b[0];
  });
  // 첫 번째 회의부터 확인
  let cnt = 1,
    cur = 0;
  for (let i = 1; i < c; i++) {
    // 현재 회의가 끝난 이후에 회의가 시작되는 경우 카운트
    if (arr[cur][1] <= arr[i][0]) {
      cur = i;
      cnt += 1;
    }
  }
  console.log(cnt);
};

sol(c, io);
